{"/home/travis/build/npmtest/node-npmtest-ember-cli-mocha/test.js":"/* istanbul instrument in package npmtest_ember_cli_mocha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-mocha/lib.npmtest_ember_cli_mocha.js":"/* istanbul instrument in package npmtest_ember_cli_mocha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_mocha = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_mocha = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-mocha/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-mocha && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_mocha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_mocha\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_mocha.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_mocha.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_mocha.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_mocha.__dirname + '/lib.npmtest_ember_cli_mocha.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-mocha/node_modules/ember-cli-mocha/index.js":"/*jshint node:true*/\n\n'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar MergeTrees = require('broccoli-merge-trees');\nvar BabelTranspiler = require('broccoli-babel-transpiler');\nvar Concat = require('broccoli-concat');\nvar Funnel = require('broccoli-funnel');\nvar resolve = require('resolve');\nvar VersionChecker = require('ember-cli-version-checker');\n\nmodule.exports = {\n  name: 'Ember CLI Mocha',\n\n  overrideTestCommandFilter: function() {\n    var TestCommand = this.project.require('ember-cli/lib/commands/test');\n\n    TestCommand.prototype.buildTestPageQueryString = function(options) {\n      var params = [];\n\n      if (options.filter) {\n        params.push('grep=' + options.filter);\n\n        if (options.invert) {\n           params.push('invert=1');\n        }\n      }\n\n      if (options.query) {\n        params.push(options.query);\n      }\n\n      return params.join('&');\n    };\n\n    TestCommand.prototype.availableOptions.push({\n      name: 'invert',\n      type: Boolean,\n      default: false,\n      description: 'Invert the filter specified by the --filter argument',\n      aliases: ['i']\n    });\n  },\n\n  _getDependencyTrees: function() {\n    if (this._dependencyTrees) {\n      return this._dependencyTrees;\n    }\n\n    var emberTestHelpersPath = path.dirname(resolve.sync('ember-test-helpers', { basedir: this._emberMochaLibPath }));\n    this._dependencyTrees = [\n      this.treeGenerator(this._emberMochaLibPath),\n      this.treeGenerator(emberTestHelpersPath),\n    ];\n\n    return this._dependencyTrees;\n  },\n\n  init: function() {\n    this._super.init && this._super.init.apply(this, arguments);\n\n    this.overrideTestCommandFilter();\n\n    var checker = new VersionChecker(this);\n    var dep = checker.for('ember-cli', 'npm');\n\n    this._shouldImportEmberMocha = !dep.gt('2.2.0-alpha');\n    this._emberMochaLibPath = path.dirname(resolve.sync('ember-mocha'));\n    this._shouldPreprocessAddonTestSupport = !!this.options && !!this.options.babel;\n\n    this.setTestGenerator();\n  },\n\n  postBuild: function () {\n    this.checkPackages();\n  },\n\n  checkPackages: function () {\n    var packages = Object.keys(this.project.addonPackages);\n    if (packages.indexOf('ember-cli-qunit') !== -1) {\n      console.warn('\\nIt looks like you are using \"ember-cli-qunit\" which can cause issues with \"ember-cli-mocha\", please remove this package.\\n');\n      process.exit(1);\n    }\n    if (packages.indexOf('ember-cli-htmlbars-inline-precompile') < 0) {\n      console.warn('\\nIt looks like you\\'re not on ember-cli 1.13, which includes ember-cli-htmlbars-inline-precompile by default. Please run: ember install ember-cli-htmlbars-inline-precompile.\\n');\n      process.exit(1);\n    }\n  },\n\n  blueprintsPath: function() {\n    return path.join(__dirname, 'blueprints');\n  },\n\n  treeForVendor: function(tree) {\n    var mochaPath = path.dirname(resolve.sync('mocha'));\n    // var mochaTree = this.treeGenerator(mochaPath);\n    var mochaTree = new Funnel(mochaPath, {\n      files: ['mocha.js', 'mocha.css'],\n      destDir: '/mocha',\n    });\n\n    var emberMochaBuildSupportPath = path.join(this._emberMochaLibPath, '..', 'build-support');\n\n    var mochaSetupTree = new Funnel(emberMochaBuildSupportPath, {\n      files: ['mocha-setup.js', 'ember-mocha-adapter.js'],\n      destDir: '/ember-mocha'\n    });\n\n    var trees = [\n      tree,\n      mochaTree,\n      mochaSetupTree\n    ];\n\n    if (this._shouldImportEmberMocha) {\n      // support for Ember CLI < 2.2.0-beta.1\n      var depTree = new MergeTrees(this._getDependencyTrees());\n\n      var transpiled = new BabelTranspiler(depTree, {\n        loose: true,\n        moduleIds: true,\n        modules: 'amdStrict'\n      });\n\n      var concattedTree = new Concat(transpiled, {\n        inputFiles: ['**/*.js'],\n        outputFile: '/ember-mocha/ember-mocha.js',\n        annotation: 'Concat: Ember Mocha'\n      });\n\n\n      trees.push(concattedTree);\n    }\n\n    return new MergeTrees(trees, {\n      annotation: 'ember-cli-mocha: treeForVendor'\n    });\n  },\n\n  treeForAddonTestSupport: function() {\n    // for Ember CLI >= 2.2.0-beta.1\n    var tree = new MergeTrees(this._getDependencyTrees());\n\n    if (this._shouldPreprocessAddonTestSupport) {\n      return this.preprocessJs(tree, {\n        registry: this.registry\n      });\n    } else {\n      return tree;\n    }\n  },\n\n  included: function included(app, parentAddon) {\n    var target = (parentAddon || app);\n    this._super.included.call(this, target);\n\n    this.options = target.options || {};\n\n    if (app.tests) {\n      var fileAssets = [\n        'vendor/mocha/mocha.js',\n        'vendor/mocha/mocha.css',\n        'vendor/ember-mocha/mocha-setup.js',\n        'vendor/ember-mocha/ember-mocha-adapter.js',\n        'vendor/ember-cli-mocha/test-loader.js'\n      ];\n\n      if (this._shouldImportEmberMocha) {\n        // support for Ember CLI < 2.2.0-beta.1\n        fileAssets.push('vendor/ember-mocha/ember-mocha.js');\n      }\n\n      var addonOptions = app.options['ember-cli-mocha'] || {};\n      if (addonOptions && !addonOptions.disableContainerStyles) {\n        fileAssets.push('vendor/ember-cli-mocha/test-container-styles.css');\n      }\n\n      fileAssets.forEach(function(file){\n        app.import(file, {\n          type: 'test'\n        });\n      });\n    }\n  },\n\n  contentFor: function(type) {\n    if (type === 'test-body') {\n      return this._readTemplate('test-body');\n    }\n  },\n\n  _readTemplate: function(name) {\n    return fs.readFileSync(path.join(__dirname, 'templates', name + '.html'));\n  },\n\n  setTestGenerator: function() {\n    this.project.generateTestFile = function(moduleName, tests) {\n      var output = \"describe('\" + moduleName + \"', function() {\\n\";\n\n      tests.forEach(function(test) {\n        output += \"  it('\" + test.name + \"', function() {\\n\";\n        if (test.passed) {\n          output +=\n            \"    // precompiled test passed\\n\";\n        } else {\n          output +=\n            \"    // precompiled test failed\\n\" +\n            \"    var error = new chai.AssertionError('\" + test.errorMessage + \"');\\n\" +\n            \"    error.stack = undefined;\\n\" +\n            \"    throw error;\\n\";\n        }\n        output +=   \"  });\\n\";\n      });\n\n      output += \"});\\n\";\n\n      return output;\n    };\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-mocha/node_modules/ember-cli-mocha/.eslintrc.js":"module.exports = {\n  root: true,\n  parserOptions: {\n    ecmaVersion: 6,\n    sourceType: 'module'\n  },\n  extends: 'eslint:recommended',\n  env: {\n    'browser': true\n  },\n  rules: {\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-mocha/node_modules/ember-cli-mocha/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n"}